============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-8.3.4, pluggy-1.5.0
rootdir: /home/jon/exercism/python/currency-exchange
plugins: subtests-0.14.1
collected 6 items

exchange_test.py ......                                           [100%]

=================================== FAILURES ===================================
_ CurrencyExchangeTest.test_exchangeable_value [variation #1] (budget=100000, denomination=1, exchange_rate=10.61, expected=8568, spread=10) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_exchangeable_value>

    @pytest.mark.task(taskno=6)
    def test_exchangeable_value(self):
        test_data = [(100000, 10.61, 10, 1),
                     (1500, 0.84, 25, 40),
                     (470000, 1050, 30, 10000000000),
                     (470000, 0.00000009, 30, 700),
                     (425.33, 0.0009, 30, 700)]
    
        result_data = [8568, 1400, 0, 4017094016600, 363300]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchange_rate, spread, denomination = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchange_rate=exchange_rate,
                              spread=spread,
                              denomination=denomination,
                              expected=expected):
    
                actual_result = exchangeable_value(budget, exchange_rate, spread, denomination)
                error_message = (f'Called exchangeable_value{budget, exchange_rate, spread, denomination}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} as the maximum '
                                 f'value of the new currency .')
    
>               self.assertEqual(actual_result, expected, msg=error_message)
E               AssertionError: 9337 != 8568 : Called exchangeable_value(100000, 10.61, 10, 1). The function returned 9337, but The tests expected 8568 as the maximum value of the new currency .

exchange_test.py:141: AssertionError
_ CurrencyExchangeTest.test_exchangeable_value [variation #2] (budget=1500, denomination=40, exchange_rate=0.84, expected=1400, spread=25) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_exchangeable_value>

    @pytest.mark.task(taskno=6)
    def test_exchangeable_value(self):
        test_data = [(100000, 10.61, 10, 1),
                     (1500, 0.84, 25, 40),
                     (470000, 1050, 30, 10000000000),
                     (470000, 0.00000009, 30, 700),
                     (425.33, 0.0009, 30, 700)]
    
        result_data = [8568, 1400, 0, 4017094016600, 363300]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchange_rate, spread, denomination = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchange_rate=exchange_rate,
                              spread=spread,
                              denomination=denomination,
                              expected=expected):
    
                actual_result = exchangeable_value(budget, exchange_rate, spread, denomination)
                error_message = (f'Called exchangeable_value{budget, exchange_rate, spread, denomination}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} as the maximum '
                                 f'value of the new currency .')
    
>               self.assertEqual(actual_result, expected, msg=error_message)
E               AssertionError: 1360 != 1400 : Called exchangeable_value(1500, 0.84, 25, 40). The function returned 1360, but The tests expected 1400 as the maximum value of the new currency .

exchange_test.py:141: AssertionError
_ CurrencyExchangeTest.test_exchangeable_value [variation #4] (budget=470000, denomination=700, exchange_rate=9e-08, expected=4017094016600, spread=30) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_exchangeable_value>

    @pytest.mark.task(taskno=6)
    def test_exchangeable_value(self):
        test_data = [(100000, 10.61, 10, 1),
                     (1500, 0.84, 25, 40),
                     (470000, 1050, 30, 10000000000),
                     (470000, 0.00000009, 30, 700),
                     (425.33, 0.0009, 30, 700)]
    
        result_data = [8568, 1400, 0, 4017094016600, 363300]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchange_rate, spread, denomination = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchange_rate=exchange_rate,
                              spread=spread,
                              denomination=denomination,
                              expected=expected):
    
                actual_result = exchangeable_value(budget, exchange_rate, spread, denomination)
                error_message = (f'Called exchangeable_value{budget, exchange_rate, spread, denomination}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} as the maximum '
                                 f'value of the new currency .')
    
>               self.assertEqual(actual_result, expected, msg=error_message)
E               AssertionError: 1566600 != 4017094016600 : Called exchangeable_value(470000, 9e-08, 30, 700). The function returned 1566600, but The tests expected 4017094016600 as the maximum value of the new currency .

exchange_test.py:141: AssertionError
_ CurrencyExchangeTest.test_exchangeable_value [variation #5] (budget=425.33, denomination=700, exchange_rate=0.0009, expected=363300, spread=30) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_exchangeable_value>

    @pytest.mark.task(taskno=6)
    def test_exchangeable_value(self):
        test_data = [(100000, 10.61, 10, 1),
                     (1500, 0.84, 25, 40),
                     (470000, 1050, 30, 10000000000),
                     (470000, 0.00000009, 30, 700),
                     (425.33, 0.0009, 30, 700)]
    
        result_data = [8568, 1400, 0, 4017094016600, 363300]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchange_rate, spread, denomination = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchange_rate=exchange_rate,
                              spread=spread,
                              denomination=denomination,
                              expected=expected):
    
                actual_result = exchangeable_value(budget, exchange_rate, spread, denomination)
                error_message = (f'Called exchangeable_value{budget, exchange_rate, spread, denomination}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} as the maximum '
                                 f'value of the new currency .')
    
>               self.assertEqual(actual_result, expected, msg=error_message)
E               AssertionError: 1400 != 363300 : Called exchangeable_value(425.33, 0.0009, 30, 700). The function returned 1400, but The tests expected 363300 as the maximum value of the new currency .

exchange_test.py:141: AssertionError
_ CurrencyExchangeTest.test_get_change [variation #1] (budget=463000, exchanging_value=5000, expected=458000) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_get_change>

    @pytest.mark.task(taskno=2)
    def test_get_change(self):
        test_data = [(463000, 5000), (1250, 120), (15000, 1380)]
        result_data = [458000, 1130, 13620]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchanging_value = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchanging_value=exchanging_value,
                              expected=expected):
    
                actual_result = get_change(*params)
                error_message = (f'Called get_change{budget, exchanging_value}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} left in your budget.')
    
>               self.assertAlmostEqual(actual_result, expected, msg=error_message)
E               AssertionError: 3000.0 != 458000 within 7 places (455000.0 difference) : Called get_change(463000, 5000). The function returned 3000.0, but The tests expected 458000 left in your budget.

exchange_test.py:53: AssertionError
_ CurrencyExchangeTest.test_get_change [variation #2] (budget=1250, exchanging_value=120, expected=1130) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_get_change>

    @pytest.mark.task(taskno=2)
    def test_get_change(self):
        test_data = [(463000, 5000), (1250, 120), (15000, 1380)]
        result_data = [458000, 1130, 13620]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchanging_value = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchanging_value=exchanging_value,
                              expected=expected):
    
                actual_result = get_change(*params)
                error_message = (f'Called get_change{budget, exchanging_value}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} left in your budget.')
    
>               self.assertAlmostEqual(actual_result, expected, msg=error_message)
E               AssertionError: 50.0 != 1130 within 7 places (1080.0 difference) : Called get_change(1250, 120). The function returned 50.0, but The tests expected 1130 left in your budget.

exchange_test.py:53: AssertionError
_ CurrencyExchangeTest.test_get_change [variation #3] (budget=15000, exchanging_value=1380, expected=13620) _

self = <exchange_test.CurrencyExchangeTest testMethod=test_get_change>

    @pytest.mark.task(taskno=2)
    def test_get_change(self):
        test_data = [(463000, 5000), (1250, 120), (15000, 1380)]
        result_data = [458000, 1130, 13620]
    
        for variant, (params, expected) in enumerate(zip(test_data, result_data), start=1):
            budget, exchanging_value = params
    
            with self.subTest(f"variation #{variant}",
                              budget=budget,
                              exchanging_value=exchanging_value,
                              expected=expected):
    
                actual_result = get_change(*params)
                error_message = (f'Called get_change{budget, exchanging_value}. '
                                 f'The function returned {actual_result}, but '
                                 f'The tests expected {expected} left in your budget.')
    
>               self.assertAlmostEqual(actual_result, expected, msg=error_message)
E               AssertionError: 1200.0 != 13620 within 7 places (12420.0 difference) : Called get_change(15000, 1380). The function returned 1200.0, but The tests expected 13620 left in your budget.

exchange_test.py:53: AssertionError
=============================== warnings summary ===============================
exchange_test.py:14
  /home/jon/exercism/python/currency-exchange/exchange_test.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=1)

exchange_test.py:35
  /home/jon/exercism/python/currency-exchange/exchange_test.py:35: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=2)

exchange_test.py:55
  /home/jon/exercism/python/currency-exchange/exchange_test.py:55: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=3)

exchange_test.py:75
  /home/jon/exercism/python/currency-exchange/exchange_test.py:75: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=4)

exchange_test.py:95
  /home/jon/exercism/python/currency-exchange/exchange_test.py:95: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=5)

exchange_test.py:115
  /home/jon/exercism/python/currency-exchange/exchange_test.py:115: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=6)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
[variation #1] (budget=100000, denomination=1, exchange_rate=10.61, expected=8568, spread=10) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_exchangeable_value
[variation #2] (budget=1500, denomination=40, exchange_rate=0.84, expected=1400, spread=25) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_exchangeable_value
[variation #4] (budget=470000, denomination=700, exchange_rate=9e-08, expected=4017094016600, spread=30) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_exchangeable_value
[variation #5] (budget=425.33, denomination=700, exchange_rate=0.0009, expected=363300, spread=30) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_exchangeable_value
[variation #1] (budget=463000, exchanging_value=5000, expected=458000) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_get_change
[variation #2] (budget=1250, exchanging_value=120, expected=1130) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_get_change
[variation #3] (budget=15000, exchanging_value=1380, expected=13620) SUBFAIL exchange_test.py::CurrencyExchangeTest::test_get_change
=================== 7 failed, 6 passed, 6 warnings in 0.08s ====================

============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-8.3.4, pluggy-1.5.0
rootdir: /home/jon/exercism/python/meltdown-mitigation
plugins: subtests-0.14.1
collected 3 items

conditionals_test.py ...                                [100%]

=================================== FAILURES ===================================
_ MeltdownMitigationTest.test_fail_safe [variation #1] (expected='LOW', neutrons_per_second=399, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'LOW'
E               - DANGER
E               + LOW
E                : Called fail_safe(10, 399, 10000). The function returned DANGER, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #2] (expected='LOW', neutrons_per_second=300, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'LOW'
E               - DANGER
E               + LOW
E                : Called fail_safe(10, 300, 10000). The function returned DANGER, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #3] (expected='LOW', neutrons_per_second=1, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'NORMAL' != 'LOW'
E               - NORMAL
E               + LOW
E                : Called fail_safe(10, 1, 10000). The function returned NORMAL, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #4] (expected='LOW', neutrons_per_second=0, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'NORMAL' != 'LOW'
E               - NORMAL
E               + LOW
E                : Called fail_safe(10, 0, 10000). The function returned NORMAL, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #5] (expected='NORMAL', neutrons_per_second=901, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'NORMAL'
E               - DANGER
E               + NORMAL
E                : Called fail_safe(10, 901, 10000). The function returned DANGER, but the test expected NORMAL as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #6] (expected='NORMAL', neutrons_per_second=1000, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'NORMAL'
E               - DANGER
E               + NORMAL
E                : Called fail_safe(10, 1000, 10000). The function returned DANGER, but the test expected NORMAL as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #7] (expected='NORMAL', neutrons_per_second=1099, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'NORMAL'
E               - DANGER
E               + NORMAL
E                : Called fail_safe(10, 1099, 10000). The function returned DANGER, but the test expected NORMAL as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #8] (expected='LOW', neutrons_per_second=899, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'LOW'
E               - DANGER
E               + LOW
E                : Called fail_safe(10, 899, 10000). The function returned DANGER, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #9] (expected='LOW', neutrons_per_second=700, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'LOW'
E               - DANGER
E               + LOW
E                : Called fail_safe(10, 700, 10000). The function returned DANGER, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_fail_safe [variation #10] (expected='LOW', neutrons_per_second=400, temp=10, threshold=10000) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_fail_safe>

    @pytest.mark.task(taskno=3)
    def test_fail_safe(self):
        temp = 10
        threshold = 10000
        test_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),
                     (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),
                     (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),
                     (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))
    
        for variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):
            with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,
                              threshold=threshold, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = fail_safe(temp, neutrons_per_second, threshold)
                failure_message = (f'Called fail_safe({temp}, {neutrons_per_second}, {threshold}). '
                                   f'The function returned {actual_result}, '
                                   f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'DANGER' != 'LOW'
E               - DANGER
E               + LOW
E                : Called fail_safe(10, 400, 10000). The function returned DANGER, but the test expected LOW as the return value.

conditionals_test.py:82: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #7] (current=599, expected='red', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'red'
E               - orange
E               + red
E                : Called reactor_efficiency(10, 599, 10000). The function returned orange, but the test expected red as the return value.

conditionals_test.py:61: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #8] (current=560, expected='red', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'red'
E               - orange
E               + red
E                : Called reactor_efficiency(10, 560, 10000). The function returned orange, but the test expected red as the return value.

conditionals_test.py:61: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #9] (current=400, expected='red', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'red'
E               - orange
E               + red
E                : Called reactor_efficiency(10, 400, 10000). The function returned orange, but the test expected red as the return value.

conditionals_test.py:61: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #10] (current=300, expected='red', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'red'
E               - orange
E               + red
E                : Called reactor_efficiency(10, 300, 10000). The function returned orange, but the test expected red as the return value.

conditionals_test.py:61: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #11] (current=299, expected='black', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'black'
E               - orange
E               + black
E                : Called reactor_efficiency(10, 299, 10000). The function returned orange, but the test expected black as the return value.

conditionals_test.py:61: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #12] (current=200, expected='black', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'black'
E               - orange
E               + black
E                : Called reactor_efficiency(10, 200, 10000). The function returned orange, but the test expected black as the return value.

conditionals_test.py:61: AssertionError
_ MeltdownMitigationTest.test_reactor_efficiency [variation #13] (current=0, expected='black', theoretical_max_power=10000, voltage=10) _

self = <conditionals_test.MeltdownMitigationTest testMethod=test_reactor_efficiency>

    @pytest.mark.task(taskno=2)
    def test_reactor_efficiency(self):
        voltage = 10
        theoretical_max_power = 10000
    
        # The numbers are chosen so that current == 10 x percentage
        test_data = ((1000, 'green'), (999, 'green'), (800, 'green'),
                     (799, 'orange'), (700, 'orange'), (600, 'orange'),
                     (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),
                     (299, 'black'), (200, 'black'), (0, 'black'))
    
        for variant, data in enumerate(test_data, start=1):
            current, expected = data
            with self.subTest(f'variation #{variant}', voltage=voltage, current=current,
                              theoretical_max_power=theoretical_max_power, expected=expected):
    
                # pylint: disable=assignment-from-no-return
                actual_result = reactor_efficiency(voltage, current, theoretical_max_power)
                failure_message =(f'Called reactor_efficiency({voltage}, {current}, {theoretical_max_power}). '
                                  f'The function returned {actual_result}, '
                                  f'but the test expected {expected} as the return value.')
    
>               self.assertEqual(actual_result, expected, failure_message)
E               AssertionError: 'orange' != 'black'
E               - orange
E               + black
E                : Called reactor_efficiency(10, 0, 10000). The function returned orange, but the test expected black as the return value.

conditionals_test.py:61: AssertionError
=============================== warnings summary ===============================
conditionals_test.py:12
  /home/jon/exercism/python/meltdown-mitigation/conditionals_test.py:12: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=1)

conditionals_test.py:39
  /home/jon/exercism/python/meltdown-mitigation/conditionals_test.py:39: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=2)

conditionals_test.py:63
  /home/jon/exercism/python/meltdown-mitigation/conditionals_test.py:63: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.task(taskno=3)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
[variation #1] (expected='LOW', neutrons_per_second=399, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #2] (expected='LOW', neutrons_per_second=300, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #3] (expected='LOW', neutrons_per_second=1, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #4] (expected='LOW', neutrons_per_second=0, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #5] (expected='NORMAL', neutrons_per_second=901, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #6] (expected='NORMAL', neutrons_per_second=1000, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #7] (expected='NORMAL', neutrons_per_second=1099, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #8] (expected='LOW', neutrons_per_second=899, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #9] (expected='LOW', neutrons_per_second=700, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #10] (expected='LOW', neutrons_per_second=400, temp=10, threshold=10000) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_fail_safe
[variation #7] (current=599, expected='red', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
[variation #8] (current=560, expected='red', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
[variation #9] (current=400, expected='red', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
[variation #10] (current=300, expected='red', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
[variation #11] (current=299, expected='black', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
[variation #12] (current=200, expected='black', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
[variation #13] (current=0, expected='black', theoretical_max_power=10000, voltage=10) SUBFAIL conditionals_test.py::MeltdownMitigationTest::test_reactor_efficiency
=================== 17 failed, 3 passed, 3 warnings in 0.10s ===================
